---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Three.js Canvas">
  <main class="h-screen w-screen overflow-hidden">
    <div class="h-full w-full" id="container"></div>
  </main>
</Layout>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  interface SketchOptions {
    domElement: HTMLElement;
  }

  export default class Sketch {
    private container: HTMLElement;
    private width: number;
    private height: number;
    private camera: THREE.PerspectiveCamera;
    private scene: THREE.Scene;
    private renderer: THREE.WebGLRenderer;
    private controls: OrbitControls;
    private time: number;
    private geometry!: THREE.BoxGeometry;
    private material!: THREE.MeshNormalMaterial;
    private mesh!: THREE.Mesh;

    constructor(options: SketchOptions) {
      this.container = options.domElement;
      
      // Get actual window dimensions
      this.width = window.innerWidth;
      this.height = window.innerHeight;

      this.camera = new THREE.PerspectiveCamera(
        70,
        this.width / this.height,
        0.01,
        10
      );
      this.camera.position.z = 1;

      this.scene = new THREE.Scene();

      this.renderer = new THREE.WebGLRenderer({ antialias: true });
      this.renderer.setPixelRatio(window.devicePixelRatio);
      
      // Set renderer size to window dimensions
      this.renderer.setSize(this.width, this.height);
      
      // Make the canvas element fill its container
      this.renderer.domElement.style.width = '100%';
      this.renderer.domElement.style.height = '100%';
      this.renderer.domElement.style.display = 'block';

      this.container.appendChild(this.renderer.domElement);
      this.controls = new OrbitControls(this.camera, this.renderer.domElement);

      this.time = 0;
      this.resize();
      this.addObjects();
      this.render();

      this.setupResize();
    }

    private resize(): void {
      // Update to window dimensions on resize
      this.width = window.innerWidth;
      this.height = window.innerHeight;
      
      this.renderer.setSize(this.width, this.height);
      this.camera.aspect = this.width / this.height;
      this.camera.updateProjectionMatrix();
    }

    private setupResize(): void {
      window.addEventListener("resize", this.resize.bind(this));
    }

    private addObjects(): void {
      this.geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
      this.material = new THREE.MeshNormalMaterial();

      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.scene.add(this.mesh);
    }

    private render(): void {
      this.time += 0.05;
      this.mesh.rotation.x = this.time / 2000;
      this.mesh.rotation.y = this.time / 1000;

      this.renderer.render(this.scene, this.camera);
      requestAnimationFrame(this.render.bind(this));
    }
  }

  new Sketch({
    domElement: document.getElementById("container") as HTMLElement,
  });
</script>